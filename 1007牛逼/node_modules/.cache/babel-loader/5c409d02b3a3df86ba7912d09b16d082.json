{"ast":null,"code":"import _objectSpread from \"/home/gal/Desktop/projects/react_learn_daily/1007\\u725B\\u903C/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/gal/Desktop/projects/react_learn_daily/1007\\u725B\\u903C/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gal/Desktop/projects/react_learn_daily/1007\\u725B\\u903C/src/GlobalProvider.js\";\nimport React, { createContext, useState, useContext } from \"react\";\nimport colorData from \"./InitialData/color-data.json\";\nimport { v4 as uuid } from \"uuid\"; // 核心语句创建ctx\n\nvar ColorContext = createContext(); // 封装成只要调用(),就可以使用到useContext(ctx),也不是特别难\n\nexport var useColors = () => useContext(ColorContext); //这是应用的封装到useColors里面\n//Pv里面有c..可以有sueState\n\nexport default function GlobalProvider({\n  children\n}) {\n  var _useState = useState(colorData),\n      _useState2 = _slicedToArray(_useState, 2),\n      colors = _useState2[0],\n      setColors = _useState2[1]; //就是原列表+1的模式..\n  //增加需要提供标题和颜色..\n  //都是用setXxx来操作..\n\n\n  var handleAddColor = (title, color) => setColors([...colors, {\n    id: uuid(),\n    score: 0,\n    title,\n    color\n  }]); //移除需要提供id...即不是该id都进行删除..\n\n\n  var handleRemoveColor = id => setColors(colors.filter(color => color.id !== id));\n\n  var handleRateColor = (id, score) => setColors(colors.map(color => color.id === id ? _objectSpread(_objectSpread({}, color), {}, {\n    score\n  }) : color));\n\n  return /*#__PURE__*/React.createElement(ColorContext.Provider, {\n    value: {\n      colors,\n      handleAddColor,\n      handleRemoveColor,\n      handleRateColor\n    } //居然是双层的..\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/home/gal/Desktop/projects/react_learn_daily/1007牛逼/src/GlobalProvider.js"],"names":["React","createContext","useState","useContext","colorData","v4","uuid","ColorContext","useColors","GlobalProvider","children","colors","setColors","handleAddColor","title","color","id","score","handleRemoveColor","filter","handleRateColor","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B,C,CACA;;AACA,IAAMC,YAAY,GAAGN,aAAa,EAAlC,C,CACA;;AACA,OAAO,IAAMO,SAAS,GAAG,MAAML,UAAU,CAACI,YAAD,CAAlC,C,CAAkD;AAEzD;;AACA,eAAe,SAASE,cAAT,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAsC;AAAA,kBACvBR,QAAQ,CAACE,SAAD,CADe;AAAA;AAAA,MAC5CO,MAD4C;AAAA,MACpCC,SADoC,kBAErD;AACA;AACA;;;AACE,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,KAAR,KACrBH,SAAS,CAAC,CACR,GAAGD,MADK,EAER;AACEK,IAAAA,EAAE,EAAEV,IAAI,EADV;AAEEW,IAAAA,KAAK,EAAE,CAFT;AAGEH,IAAAA,KAHF;AAIEC,IAAAA;AAJF,GAFQ,CAAD,CADX,CALmD,CAenD;;;AACA,MAAMG,iBAAiB,GAAIF,EAAD,IACxBJ,SAAS,CAACD,MAAM,CAACQ,MAAP,CAAeJ,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaA,EAAtC,CAAD,CADX;;AAGA,MAAMI,eAAe,GAAG,CAACJ,EAAD,EAAKC,KAAL,KACtBL,SAAS,CACPD,MAAM,CAACU,GAAP,CAAYN,KAAD,IAAYA,KAAK,CAACC,EAAN,KAAaA,EAAb,mCAAuBD,KAAvB;AAA8BE,IAAAA;AAA9B,OAAwCF,KAA/D,CADO,CADX;;AAKA,sBACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AAAEJ,MAAAA,MAAF;AAAUE,MAAAA,cAAV;AAA0BK,MAAAA,iBAA1B;AAA6CE,MAAAA;AAA7C,KADT,CAEE;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGV,QAJH,CADF;AAQD","sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\nimport colorData from \"./InitialData/color-data.json\";\nimport { v4 as uuid } from \"uuid\";\n// 核心语句创建ctx\nconst ColorContext = createContext();\n// 封装成只要调用(),就可以使用到useContext(ctx),也不是特别难\nexport const useColors = () => useContext(ColorContext); //这是应用的封装到useColors里面\n\n//Pv里面有c..可以有sueState\nexport default function GlobalProvider({ children }) {\n  const [colors, setColors] = useState(colorData);\n//就是原列表+1的模式..\n//增加需要提供标题和颜色..\n//都是用setXxx来操作..\n  const handleAddColor = (title, color) =>\n    setColors([\n      ...colors,\n      {\n        id: uuid(),\n        score: 0,\n        title,\n        color,\n      },\n    ]);\n  //移除需要提供id...即不是该id都进行删除..\n  const handleRemoveColor = (id) =>\n    setColors(colors.filter((color) => color.id !== id));\n\n  const handleRateColor = (id, score) =>\n    setColors(\n      colors.map((color) => (color.id === id ? { ...color, score } : color))\n    );\n\n  return (\n    <ColorContext.Provider\n      value={{ colors, handleAddColor, handleRemoveColor, handleRateColor }}\n      //居然是双层的..\n    >\n      {children}\n    </ColorContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}