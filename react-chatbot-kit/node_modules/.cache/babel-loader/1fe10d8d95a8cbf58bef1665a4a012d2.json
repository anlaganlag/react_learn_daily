{"ast":null,"code":"class ActionProvider {\n  // The action provider receives createChatBotMessage which you can use to define the bots response, and \n  // the setState function that allows for manipulating the bots internal state.\n  constructor(createChatBotMessage, setStateFunc) {\n    this.handleMessageParser = () => {\n      const messages = this.createChatBotMessage(\"The message parser controls how the bot reads input and decides which action to invoke.\", {\n        widget: \"messageParser\",\n        withAvatar: true\n      });\n      this.addMessageToBotState(messages);\n    };\n\n    this.handleDefault = () => {\n      const message = this.createChatBotMessage(\"How can I help?\", {\n        withAvatar: true\n      });\n      this.addMessageToBotState(message);\n    };\n\n    this.addMessageToBotState = messages => {\n      if (Array.isArray(messages)) {\n        this.setState(state => ({ ...state,\n          messages: [...state.messages, ...messages]\n        }));\n      } else {\n        this.setState(state => ({ ...state,\n          messages: [...state.messages, messages]\n        }));\n      }\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["/home/gal/Desktop/projects/react_learn_daily/react-chatbot-kit/src/chatbot/ActionProvider.js"],"names":["ActionProvider","constructor","createChatBotMessage","setStateFunc","handleMessageParser","messages","widget","withAvatar","addMessageToBotState","handleDefault","message","Array","isArray","setState","state"],"mappings":"AAAA,MAAMA,cAAN,CAAqB;AACjB;AACA;AACAC,EAAAA,WAAW,CAACC,oBAAD,EAAuBC,YAAvB,EAAqC;AAAA,SAKhDC,mBALgD,GAK1B,MAAM;AAC1B,YAAMC,QAAQ,GAAG,KAAKH,oBAAL,CACf,yFADe,EAEf;AAAEI,QAAAA,MAAM,EAAE,eAAV;AAA2BC,QAAAA,UAAU,EAAE;AAAvC,OAFe,CAAjB;AAKA,WAAKC,oBAAL,CAA0BH,QAA1B;AACD,KAZ+C;;AAAA,SAchDI,aAdgD,GAchC,MAAM;AACpB,YAAMC,OAAO,GAAG,KAAKR,oBAAL,CAA0B,iBAA1B,EAA6C;AAC3DK,QAAAA,UAAU,EAAE;AAD+C,OAA7C,CAAhB;AAIA,WAAKC,oBAAL,CAA0BE,OAA1B;AACD,KApB+C;;AAAA,SAsBhDF,oBAtBgD,GAsBxBH,QAAD,IAAc;AACnC,UAAIM,KAAK,CAACC,OAAN,CAAcP,QAAd,CAAJ,EAA6B;AAC3B,aAAKQ,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBT,UAAAA,QAAQ,EAAE,CAAC,GAAGS,KAAK,CAACT,QAAV,EAAoB,GAAGA,QAAvB;AAFc,SAAZ,CAAd;AAID,OALD,MAKO;AACL,aAAKQ,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBT,UAAAA,QAAQ,EAAE,CAAC,GAAGS,KAAK,CAACT,QAAV,EAAoBA,QAApB;AAFc,SAAZ,CAAd;AAID;AACF,KAlC+C;;AAC9C,SAAKH,oBAAL,GAA4BA,oBAA5B;AACA,SAAKW,QAAL,GAAgBV,YAAhB;AACD;;AANgB;;AAwCnB,eAAeH,cAAf","sourcesContent":["class ActionProvider {\n    // The action provider receives createChatBotMessage which you can use to define the bots response, and \n    // the setState function that allows for manipulating the bots internal state.\n    constructor(createChatBotMessage, setStateFunc) {\n      this.createChatBotMessage = createChatBotMessage;\n      this.setState = setStateFunc;\n    }\n  \n    handleMessageParser = () => {\n      const messages = this.createChatBotMessage(\n        \"The message parser controls how the bot reads input and decides which action to invoke.\",\n        { widget: \"messageParser\", withAvatar: true }\n      );\n  \n      this.addMessageToBotState(messages);\n    };\n  \n    handleDefault = () => {\n      const message = this.createChatBotMessage(\"How can I help?\", {\n        withAvatar: true,\n      });\n  \n      this.addMessageToBotState(message)\n    };\n  \n    addMessageToBotState = (messages) => {\n      if (Array.isArray(messages)) {\n        this.setState((state) => ({\n          ...state,\n          messages: [...state.messages, ...messages],\n        }));\n      } else {\n        this.setState((state) => ({\n          ...state,\n          messages: [...state.messages, messages],\n        }));\n      }\n    };\n  }\n  \n  export default ActionProvider;"]},"metadata":{},"sourceType":"module"}